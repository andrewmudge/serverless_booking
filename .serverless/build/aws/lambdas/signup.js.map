{
  "version": 3,
  "sources": ["../../../../aws/lambdas/signup.ts"],
  "sourcesContent": ["import { APIGatewayProxyHandler } from 'aws-lambda';\r\nimport {\r\n  CognitoIdentityProviderClient,\r\n  SignUpCommand,\r\n} from '@aws-sdk/client-cognito-identity-provider';\r\nimport crypto from 'crypto';\r\n\r\nconst region = process.env.AWS_REGION!;\r\nconst clientId = process.env.COGNITO_CLIENT_ID!;\r\nconst clientSecret = process.env.COGNITO_CLIENT_SECRET!;\r\n\r\nfunction getSecretHash(username: string) {\r\n  return crypto.createHmac('sha256', clientSecret)\r\n    .update(username + clientId)\r\n    .digest('base64');\r\n}\r\n\r\nexport const handler: APIGatewayProxyHandler = async (event) => {\r\n  try {\r\n    const { email, password, givenName, familyName } = JSON.parse(event.body || '{}');\r\n\r\n    const client = new CognitoIdentityProviderClient({ region });\r\n\r\n    const command = new SignUpCommand({\r\n      ClientId: clientId,\r\n      Username: email,\r\n      Password: password,\r\n      SecretHash: getSecretHash(email),\r\n      UserAttributes: [\r\n        { Name: 'email', Value: email },\r\n        { Name: 'given_name', Value: givenName },\r\n        { Name: 'family_name', Value: familyName },\r\n      ],\r\n    });\r\n\r\n    const response = await client.send(command);\r\n\r\n    return {\r\n      statusCode: 200,\r\n      headers: { 'Access-Control-Allow-Origin': '*' },\r\n      body: JSON.stringify({ message: 'User signed up', data: response }),\r\n    };\r\n  } catch (err: unknown) {\r\n    const message = err instanceof Error ? err.message : 'Unknown error';\r\n    return {\r\n      statusCode: 400,\r\n      headers: { 'Access-Control-Allow-Origin': '*' },\r\n      body: JSON.stringify({ error: message }),\r\n    };\r\n  }\r\n};"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,8CAGO;AACP,oBAAmB;AAEnB,IAAM,SAAS,QAAQ,IAAI;AAC3B,IAAM,WAAW,QAAQ,IAAI;AAC7B,IAAM,eAAe,QAAQ,IAAI;AAEjC,SAAS,cAAc,UAAkB;AACvC,SAAO,cAAAA,QAAO,WAAW,UAAU,YAAY,EAC5C,OAAO,WAAW,QAAQ,EAC1B,OAAO,QAAQ;AACpB;AAEO,IAAM,UAAkC,OAAO,UAAU;AAC9D,MAAI;AACF,UAAM,EAAE,OAAO,UAAU,WAAW,WAAW,IAAI,KAAK,MAAM,MAAM,QAAQ,IAAI;AAEhF,UAAM,SAAS,IAAI,sEAA8B,EAAE,OAAO,CAAC;AAE3D,UAAM,UAAU,IAAI,sDAAc;AAAA,MAChC,UAAU;AAAA,MACV,UAAU;AAAA,MACV,UAAU;AAAA,MACV,YAAY,cAAc,KAAK;AAAA,MAC/B,gBAAgB;AAAA,QACd,EAAE,MAAM,SAAS,OAAO,MAAM;AAAA,QAC9B,EAAE,MAAM,cAAc,OAAO,UAAU;AAAA,QACvC,EAAE,MAAM,eAAe,OAAO,WAAW;AAAA,MAC3C;AAAA,IACF,CAAC;AAED,UAAM,WAAW,MAAM,OAAO,KAAK,OAAO;AAE1C,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS,EAAE,+BAA+B,IAAI;AAAA,MAC9C,MAAM,KAAK,UAAU,EAAE,SAAS,kBAAkB,MAAM,SAAS,CAAC;AAAA,IACpE;AAAA,EACF,SAAS,KAAc;AACrB,UAAM,UAAU,eAAe,QAAQ,IAAI,UAAU;AACrD,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS,EAAE,+BAA+B,IAAI;AAAA,MAC9C,MAAM,KAAK,UAAU,EAAE,OAAO,QAAQ,CAAC;AAAA,IACzC;AAAA,EACF;AACF;",
  "names": ["crypto"]
}
