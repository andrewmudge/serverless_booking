{
  "version": 3,
  "sources": ["../../../../aws/lambdas/bookEvent.ts"],
  "sourcesContent": ["import { APIGatewayProxyHandler } from 'aws-lambda';\r\nimport {\r\n  DynamoDBClient,\r\n  TransactWriteItemsCommand,\r\n} from '@aws-sdk/client-dynamodb';\r\n\r\nconst client = new DynamoDBClient({});\r\n\r\nexport const handler: APIGatewayProxyHandler = async (event) => {\r\n  try {\r\n    const { eventId, userId } = JSON.parse(event.body || '{}');\r\n\r\n    if (!eventId || !userId) {\r\n      return {\r\n        statusCode: 400,\r\n        body: JSON.stringify({ error: 'Missing eventId or userId' }),\r\n      };\r\n    }\r\n\r\n    const command = new TransactWriteItemsCommand({\r\n      TransactItems: [\r\n        {\r\n          Update: {\r\n            TableName: 'Events', // <-- Use your actual table name\r\n            Key: { eventId: { S: eventId } },\r\n            ConditionExpression: 'seatsRemaining > :zero',\r\n            UpdateExpression: 'SET seatsRemaining = seatsRemaining - :one',\r\n            ExpressionAttributeValues: {\r\n              ':one': { N: '1' },\r\n              ':zero': { N: '0' },\r\n            },\r\n          },\r\n        },\r\n        {\r\n          Put: {\r\n            TableName: 'Registrations', // <-- Use your actual table name\r\n            Item: {\r\n              userId: { S: userId },\r\n              eventId: { S: eventId },\r\n            },\r\n            ConditionExpression: 'attribute_not_exists(eventId)', // eventId as sort key\r\n          },\r\n        },\r\n      ],\r\n    });\r\n\r\n    await client.send(command);\r\n\r\n    // On success\r\n    return {\r\n      statusCode: 200,\r\n      body: JSON.stringify({ message: 'Booking confirmed' }),\r\n    };\r\n  } catch (err: any) {\r\n    // On error\r\n    return {\r\n      statusCode: 400,\r\n      body: JSON.stringify({ error: err.message }),\r\n    };\r\n  }\r\n};\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,6BAGO;AAEP,IAAM,SAAS,IAAI,sCAAe,CAAC,CAAC;AAE7B,IAAM,UAAkC,OAAO,UAAU;AAC9D,MAAI;AACF,UAAM,EAAE,SAAS,OAAO,IAAI,KAAK,MAAM,MAAM,QAAQ,IAAI;AAEzD,QAAI,CAAC,WAAW,CAAC,QAAQ;AACvB,aAAO;AAAA,QACL,YAAY;AAAA,QACZ,MAAM,KAAK,UAAU,EAAE,OAAO,4BAA4B,CAAC;AAAA,MAC7D;AAAA,IACF;AAEA,UAAM,UAAU,IAAI,iDAA0B;AAAA,MAC5C,eAAe;AAAA,QACb;AAAA,UACE,QAAQ;AAAA,YACN,WAAW;AAAA;AAAA,YACX,KAAK,EAAE,SAAS,EAAE,GAAG,QAAQ,EAAE;AAAA,YAC/B,qBAAqB;AAAA,YACrB,kBAAkB;AAAA,YAClB,2BAA2B;AAAA,cACzB,QAAQ,EAAE,GAAG,IAAI;AAAA,cACjB,SAAS,EAAE,GAAG,IAAI;AAAA,YACpB;AAAA,UACF;AAAA,QACF;AAAA,QACA;AAAA,UACE,KAAK;AAAA,YACH,WAAW;AAAA;AAAA,YACX,MAAM;AAAA,cACJ,QAAQ,EAAE,GAAG,OAAO;AAAA,cACpB,SAAS,EAAE,GAAG,QAAQ;AAAA,YACxB;AAAA,YACA,qBAAqB;AAAA;AAAA,UACvB;AAAA,QACF;AAAA,MACF;AAAA,IACF,CAAC;AAED,UAAM,OAAO,KAAK,OAAO;AAGzB,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,EAAE,SAAS,oBAAoB,CAAC;AAAA,IACvD;AAAA,EACF,SAAS,KAAU;AAEjB,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,MAAM,KAAK,UAAU,EAAE,OAAO,IAAI,QAAQ,CAAC;AAAA,IAC7C;AAAA,EACF;AACF;",
  "names": []
}
