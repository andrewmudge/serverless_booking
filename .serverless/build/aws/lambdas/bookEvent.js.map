{
  "version": 3,
  "sources": ["../../../../aws/lambdas/bookEvent.ts"],
  "sourcesContent": ["import { APIGatewayProxyHandler } from 'aws-lambda';\r\nimport {\r\n  DynamoDBClient,\r\n  TransactWriteItemsCommand,\r\n} from '@aws-sdk/client-dynamodb';\r\nimport { SESClient, SendEmailCommand } from '@aws-sdk/client-ses';\r\n\r\nconst client = new DynamoDBClient({});\r\nconst ses = new SESClient({});\r\n\r\n// Make sure to set SENDER_EMAIL in your environment variables\r\nconst SENDER_EMAIL = process.env['SENDER_EMAIL']!;\r\n\r\nexport const handler: APIGatewayProxyHandler = async (event) => {\r\n  try {\r\n    const { eventId, userId, userEmail, title, day, time } = JSON.parse(event.body || '{}');\r\n\r\n    if (!eventId || !userId || !userEmail || !title || !day || !time) {\r\n      console.error('Missing required fields:', { eventId, userId, userEmail, title, day, time });\r\n      return {\r\n        statusCode: 400,\r\n        headers: { 'Access-Control-Allow-Origin': '*' },\r\n        body: JSON.stringify({ error: 'Missing eventId, userId, userEmail, title, day, or time' }),\r\n      };\r\n    }\r\n\r\n    const command = new TransactWriteItemsCommand({\r\n      TransactItems: [\r\n        {\r\n          Update: {\r\n            TableName: process.env.EVENTS_TABLE,\r\n            Key: { eventId: { S: eventId } },\r\n            ConditionExpression: 'seatsRemaining > :zero',\r\n            UpdateExpression: 'SET seatsRemaining = seatsRemaining - :one',\r\n            ExpressionAttributeValues: {\r\n              ':one': { N: '1' },\r\n              ':zero': { N: '0' },\r\n            },\r\n          },\r\n        },\r\n        {\r\n          Put: {\r\n            TableName: process.env.BOOKINGS_TABLE,\r\n            Item: {\r\n              userId: { S: userId },\r\n              eventId: { S: eventId },\r\n            },\r\n            ConditionExpression: 'attribute_not_exists(eventId)',\r\n          },\r\n        },\r\n      ],\r\n    });\r\n\r\n    await client.send(command);\r\n\r\n    // Send SES email notification with event details\r\n    const emailBody = `Thank you for registering for ${title} on ${day} at ${time}. Your booking is confirmed.`;\r\n\r\n    const emailCommand = new SendEmailCommand({\r\n      Source: SENDER_EMAIL,\r\n      Destination: {\r\n        ToAddresses: [userEmail],\r\n      },\r\n      Message: {\r\n        Subject: { Data: 'Event Registration Confirmation' },\r\n        Body: {\r\n          Text: { Data: emailBody },\r\n        },\r\n      },\r\n    });\r\n\r\n    // Log before sending email\r\n    console.log('Sending SES email:', {\r\n      to: userEmail,\r\n      from: SENDER_EMAIL,\r\n      subject: 'Event Registration Confirmation',\r\n      body: emailBody,\r\n    });\r\n\r\n    try {\r\n      await ses.send(emailCommand);\r\n      console.log('SES email sent successfully');\r\n    } catch (sesErr) {\r\n      console.error('SES send error:', sesErr);\r\n      throw sesErr;\r\n    }\r\n\r\n    return {\r\n      statusCode: 200,\r\n      headers: { 'Access-Control-Allow-Origin': '*' },\r\n      body: JSON.stringify({ message: 'Booking confirmed and email sent' }),\r\n    };\r\n  } catch (err: unknown) {\r\n    const message =\r\n      err instanceof Error ? err.message : 'Unknown error occurred';\r\n    console.error('Lambda error:', message, err);\r\n    return {\r\n      statusCode: 400,\r\n      headers: { 'Access-Control-Allow-Origin': '*' },\r\n      body: JSON.stringify({ error: message }),\r\n    };\r\n  }\r\n};\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,6BAGO;AACP,wBAA4C;AAE5C,IAAM,SAAS,IAAI,sCAAe,CAAC,CAAC;AACpC,IAAM,MAAM,IAAI,4BAAU,CAAC,CAAC;AAG5B,IAAM,eAAe,QAAQ,IAAI,cAAc;AAExC,IAAM,UAAkC,OAAO,UAAU;AAC9D,MAAI;AACF,UAAM,EAAE,SAAS,QAAQ,WAAW,OAAO,KAAK,KAAK,IAAI,KAAK,MAAM,MAAM,QAAQ,IAAI;AAEtF,QAAI,CAAC,WAAW,CAAC,UAAU,CAAC,aAAa,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM;AAChE,cAAQ,MAAM,4BAA4B,EAAE,SAAS,QAAQ,WAAW,OAAO,KAAK,KAAK,CAAC;AAC1F,aAAO;AAAA,QACL,YAAY;AAAA,QACZ,SAAS,EAAE,+BAA+B,IAAI;AAAA,QAC9C,MAAM,KAAK,UAAU,EAAE,OAAO,0DAA0D,CAAC;AAAA,MAC3F;AAAA,IACF;AAEA,UAAM,UAAU,IAAI,iDAA0B;AAAA,MAC5C,eAAe;AAAA,QACb;AAAA,UACE,QAAQ;AAAA,YACN,WAAW,QAAQ,IAAI;AAAA,YACvB,KAAK,EAAE,SAAS,EAAE,GAAG,QAAQ,EAAE;AAAA,YAC/B,qBAAqB;AAAA,YACrB,kBAAkB;AAAA,YAClB,2BAA2B;AAAA,cACzB,QAAQ,EAAE,GAAG,IAAI;AAAA,cACjB,SAAS,EAAE,GAAG,IAAI;AAAA,YACpB;AAAA,UACF;AAAA,QACF;AAAA,QACA;AAAA,UACE,KAAK;AAAA,YACH,WAAW,QAAQ,IAAI;AAAA,YACvB,MAAM;AAAA,cACJ,QAAQ,EAAE,GAAG,OAAO;AAAA,cACpB,SAAS,EAAE,GAAG,QAAQ;AAAA,YACxB;AAAA,YACA,qBAAqB;AAAA,UACvB;AAAA,QACF;AAAA,MACF;AAAA,IACF,CAAC;AAED,UAAM,OAAO,KAAK,OAAO;AAGzB,UAAM,YAAY,iCAAiC,KAAK,OAAO,GAAG,OAAO,IAAI;AAE7E,UAAM,eAAe,IAAI,mCAAiB;AAAA,MACxC,QAAQ;AAAA,MACR,aAAa;AAAA,QACX,aAAa,CAAC,SAAS;AAAA,MACzB;AAAA,MACA,SAAS;AAAA,QACP,SAAS,EAAE,MAAM,kCAAkC;AAAA,QACnD,MAAM;AAAA,UACJ,MAAM,EAAE,MAAM,UAAU;AAAA,QAC1B;AAAA,MACF;AAAA,IACF,CAAC;AAGD,YAAQ,IAAI,sBAAsB;AAAA,MAChC,IAAI;AAAA,MACJ,MAAM;AAAA,MACN,SAAS;AAAA,MACT,MAAM;AAAA,IACR,CAAC;AAED,QAAI;AACF,YAAM,IAAI,KAAK,YAAY;AAC3B,cAAQ,IAAI,6BAA6B;AAAA,IAC3C,SAAS,QAAQ;AACf,cAAQ,MAAM,mBAAmB,MAAM;AACvC,YAAM;AAAA,IACR;AAEA,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS,EAAE,+BAA+B,IAAI;AAAA,MAC9C,MAAM,KAAK,UAAU,EAAE,SAAS,mCAAmC,CAAC;AAAA,IACtE;AAAA,EACF,SAAS,KAAc;AACrB,UAAM,UACJ,eAAe,QAAQ,IAAI,UAAU;AACvC,YAAQ,MAAM,iBAAiB,SAAS,GAAG;AAC3C,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS,EAAE,+BAA+B,IAAI;AAAA,MAC9C,MAAM,KAAK,UAAU,EAAE,OAAO,QAAQ,CAAC;AAAA,IACzC;AAAA,EACF;AACF;",
  "names": []
}
